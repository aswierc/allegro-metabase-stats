"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllegroRestClient = void 0;
var helpers_1 = require("./helpers");
var request_1 = __importDefault(require("request"));
var jwt = __importStar(require("jsonwebtoken"));
function AllegroRestClient(config, options) {
    return __awaiter(this, void 0, void 0, function () {
        var baseUrl, apiUrl, oauthUser, account, isLogging, store, storage, tokens, storeTokens, getSellerId, refresh, bindApp, authorizeDevice, authorizeWeb, makeRequest;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    baseUrl = 'https://allegro.pl';
                    apiUrl = 'https://api.allegro.pl';
                    if (options && options.sandbox === true) {
                        baseUrl = 'https://allegro.pl.allegrosandbox.pl';
                        apiUrl = 'https://api.allegro.pl.allegrosandbox.pl';
                    }
                    oauthUser = Buffer.from(config.client_id + ":" + config.client_secret).toString('base64');
                    account = (options && options.account) || 'default';
                    isLogging = options && options.logger === true;
                    store = {};
                    storage = options.storage
                        ? options.storage
                        : {
                            set: function (tokens) {
                                store[account] = tokens;
                            },
                            get: function () {
                                return store[account];
                            },
                        };
                    return [4 /*yield*/, storage.get(account)];
                case 1:
                    tokens = (_a.sent()) || null;
                    storeTokens = function (authTokens) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, storage.set(account, authTokens)];
                                case 1:
                                    _a.sent();
                                    tokens = authTokens;
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                    getSellerId = function () {
                        if (tokens && tokens.access_token) {
                            var decoded = jwt.decode(tokens.access_token);
                            return (decoded && decoded.user_name) || null;
                        }
                        return null;
                    };
                    refresh = function () { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!tokens || !tokens.refresh_token) {
                                        return [2 /*return*/, Promise.reject({
                                                error: 'missing_refresh_token',
                                                error_description: 'Refresh token is missing or not stored in the app.',
                                            })];
                                    }
                                    if (isLogging) {
                                        console.info("app_name: " + config.app_name + ", account: " + account + ", refreshing tokens...");
                                    }
                                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                                            var refreshOptions = {
                                                method: 'POST',
                                                uri: baseUrl + "/auth/oauth/token?" +
                                                    "grant_type=refresh_token&" +
                                                    ("refresh_token=" + tokens.refresh_token + "&") +
                                                    ("redirect_uri=" + config.url_redirect),
                                                headers: {
                                                    Authorization: "Basic " + oauthUser,
                                                },
                                            };
                                            return request_1.default(refreshOptions, function (err, response, body) { return __awaiter(_this, void 0, void 0, function () {
                                                var refreshedTokens;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            refreshedTokens = body && JSON.parse(body);
                                                            if (err) {
                                                                return [2 /*return*/, reject({
                                                                        error: 'request_err',
                                                                        error_description: err,
                                                                    })];
                                                            }
                                                            else if (refreshedTokens.error)
                                                                return [2 /*return*/, reject(refreshedTokens)];
                                                            refreshedTokens.created_at = Math.ceil(Date.now() / 1000);
                                                            return [4 /*yield*/, storeTokens(refreshedTokens)];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/, resolve(refreshedTokens)];
                                                    }
                                                });
                                            }); });
                                        })];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        });
                    }); };
                    bindApp = function () { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (isLogging) {
                                console.info("app_name: " + config.app_name + ", account: " + account + ", binding app...");
                            }
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var authorizeOptions = {
                                        method: 'POST',
                                        uri: baseUrl + "/auth/oauth/device",
                                        headers: {
                                            Authorization: "Basic " + oauthUser,
                                            'Content-Type': "application/x-www-form-urlencoded",
                                        },
                                        form: {
                                            client_id: config.client_id,
                                        },
                                    };
                                    request_1.default(authorizeOptions, function (err, response, body) { return __awaiter(_this, void 0, void 0, function () {
                                        var deviceOptions;
                                        return __generator(this, function (_a) {
                                            deviceOptions = body && JSON.parse(body);
                                            if (err) {
                                                return [2 /*return*/, reject({
                                                        error: 'request_err',
                                                        error_description: err,
                                                    })];
                                            }
                                            else if (deviceOptions.error)
                                                return [2 /*return*/, reject(deviceOptions)];
                                            return [2 /*return*/, resolve(deviceOptions)];
                                        });
                                    }); });
                                })];
                        });
                    }); };
                    authorizeDevice = function (device_code) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (isLogging) {
                                console.info("app_name: " + config.app_name + ", account: " + account + ", authorizing device...");
                            }
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var authorizeOptions = {
                                        method: 'POST',
                                        uri: baseUrl + "/auth/oauth/token?" +
                                            "grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&" +
                                            ("device_code=" + device_code),
                                        headers: {
                                            Authorization: "Basic " + oauthUser,
                                        },
                                    };
                                    request_1.default(authorizeOptions, function (err, response, body) { return __awaiter(_this, void 0, void 0, function () {
                                        var authorizedTokens;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    authorizedTokens = body && JSON.parse(body);
                                                    if (err) {
                                                        return [2 /*return*/, reject({
                                                                error: 'request_err',
                                                                error_description: err,
                                                            })];
                                                    }
                                                    else if (authorizedTokens.error) {
                                                        return [2 /*return*/, reject(authorizedTokens)];
                                                    }
                                                    authorizedTokens.created_at = Math.ceil(Date.now() / 1000);
                                                    return [4 /*yield*/, storeTokens(authorizedTokens)];
                                                case 1:
                                                    _a.sent();
                                                    return [2 /*return*/, resolve(authorizedTokens)];
                                            }
                                        });
                                    }); });
                                })];
                        });
                    }); };
                    authorizeWeb = function (code) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            if (isLogging) {
                                console.info("app_name: " + config.app_name + ", account: " + account + ", authorizing web...");
                            }
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var authorizeOptions = {
                                        method: 'POST',
                                        uri: baseUrl + "/auth/oauth/token?" +
                                            "grant_type=authorization_code&" +
                                            ("code=" + code + "&") +
                                            ("redirect_uri=" + config.url_redirect),
                                        headers: {
                                            Authorization: "Basic " + oauthUser,
                                        },
                                    };
                                    request_1.default(authorizeOptions, function (err, response, body) { return __awaiter(_this, void 0, void 0, function () {
                                        var authorizedTokens;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    authorizedTokens = body && JSON.parse(body);
                                                    if (err) {
                                                        return [2 /*return*/, reject({
                                                                error: 'request_err',
                                                                error_description: err,
                                                            })];
                                                    }
                                                    else if (authorizedTokens.error) {
                                                        return [2 /*return*/, reject(authorizedTokens)];
                                                    }
                                                    authorizedTokens.created_at = Math.ceil(Date.now() / 1000);
                                                    return [4 /*yield*/, storeTokens(authorizedTokens)];
                                                case 1:
                                                    _a.sent();
                                                    return [2 /*return*/, resolve(authorizedTokens)];
                                            }
                                        });
                                    }); });
                                })];
                        });
                    }); };
                    makeRequest = function (endpoint, opts) { return __awaiter(_this, void 0, void 0, function () {
                        var requestOptions;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (isLogging) {
                                        console.debug("tokens expire in " + helpers_1.getExpiresInHours(tokens).toFixed(2) + " hours");
                                    }
                                    if (!(tokens && tokens.refresh_token && helpers_1.getExpiresInHours(tokens) < 6)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, refresh()];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    if (!tokens || !tokens.access_token) {
                                        return [2 /*return*/, Promise.reject({
                                                error: 'missing_access_token',
                                                error_description: 'Access token is missing or not stored in the app.',
                                            })];
                                    }
                                    if (isLogging) {
                                        console.debug("app_name: " + config.app_name + ", account: " + account + ", request: " + endpoint);
                                    }
                                    requestOptions = {
                                        uri: "" + apiUrl + endpoint,
                                        method: (opts && opts.method) || 'GET',
                                        headers: {
                                            Authorization: "Bearer " + tokens.access_token,
                                            Accept: 'application/vnd.allegro.public.v1+json',
                                        },
                                    };
                                    return [2 /*return*/, new Promise(function (resolve, reject) {
                                            request_1.default(Object.assign(requestOptions, opts), function (err, response, body) {
                                                body = body && JSON.parse(body);
                                                if (err) {
                                                    return reject({
                                                        error: 'request_err',
                                                        error_description: err,
                                                    });
                                                }
                                                else if (body.error || body.errors)
                                                    return reject(body);
                                                return resolve(body);
                                            });
                                        })];
                            }
                        });
                    }); };
                    return [2 /*return*/, {
                            bindApp: config.type === 'device' ? bindApp : undefined,
                            authorize: config.type === 'device' ? authorizeDevice : authorizeWeb,
                            getAccount: function () { return account; },
                            getExpiresInHours: function () { return helpers_1.getExpiresInHours(tokens).toFixed(2); },
                            getSellerId: function () { return getSellerId(); },
                            request: makeRequest,
                            get: function (endpoint, opts) { return makeRequest(endpoint, __assign(__assign({}, opts), { method: 'GET' })); },
                            post: function (endpoint, opts) { return makeRequest(endpoint, __assign(__assign({}, opts), { method: 'POST' })); },
                            put: function (endpoint, opts) { return makeRequest(endpoint, __assign(__assign({}, opts), { method: 'PUT' })); },
                            delete: function (endpoint, opts) { return makeRequest(endpoint, __assign(__assign({}, opts), { method: 'DELETE' })); },
                        }];
            }
        });
    });
}
exports.AllegroRestClient = AllegroRestClient;
//# sourceMappingURL=index.js.map